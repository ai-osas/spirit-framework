// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19; // Align with token contract version

import "./SPIRIT_TestToken.sol";

contract RewardDistribution {
    address private immutable spiritTokenAddress;
    address public owner;
    uint256 public totalDistributed;

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call");
        _;
    }

    constructor(address _spiritTokenAddress) {
        spiritTokenAddress = _spiritTokenAddress;
        owner = msg.sender;
    }

    // Critical fix: Add token approval system
    function approveTokens(uint256 amount) external onlyOwner {
        SPIRIT_TestToken(spiritTokenAddress).approve(address(this), amount);
    }

    // Added safety feature: Allow token recovery
    function recoverTokens(address recipient) external onlyOwner {
        SPIRIT_TestToken token = SPIRIT_TestToken(spiritTokenAddress);
        uint256 balance = token.balanceOf(address(this));
        require(balance > 0, "No tokens to recover");
        token.transfer(recipient, balance);
    }

    // Improved distribution with safe transfers
    function distributeReward(address _recipient, uint256 _amount) external onlyOwner {
        require(_recipient != address(0), "Invalid recipient");
        require(_amount > 0, "Amount must be > 0");
        
        SPIRIT_TestToken token = SPIRIT_TestToken(spiritTokenAddress);
        uint256 contractBalance = token.balanceOf(address(this));
        require(contractBalance >= _amount, "Insufficient contract balance");

        bool success = token.transfer(_recipient, _amount);
        require(success, "Transfer failed");

        totalDistributed += _amount;
        emit RewardDistributed(_recipient, _amount);
    }

    // Added ownership transfer function
    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Invalid new owner");
        owner = newOwner;
    }

    event RewardDistributed(address indexed recipient, uint256 amount);
}